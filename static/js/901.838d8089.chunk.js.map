{"version":3,"file":"static/js/901.838d8089.chunk.js","mappings":"mLAKiCA,E,2DCJjC,EAAuB,sB,mECwCvB,EAtC+B,SAACC,GAC5B,OAA8BC,EAAAA,EAAAA,WAAS,GAAvC,eAAKC,EAAL,KAAeC,EAAf,KACA,GAA0BF,EAAAA,EAAAA,UAASD,EAAMI,QAAzC,eAAKA,EAAL,KAAaC,EAAb,MACAC,EAAAA,EAAAA,YAAU,WACND,EAAUL,EAAMI,UACjB,CAACJ,EAAMI,SAcV,OACI,UAACG,EAAA,EAAD,YACML,IACM,SAACM,EAAA,EAAD,CAAYC,GAAI,CAACC,OAAQ,WACbC,QAAQ,YACRC,cAjBH,WACjBT,GAAY,IAcJ,SAE8CH,EAAMI,QAAU,QAGrEF,IACO,SAACW,EAAA,EAAD,CACIC,SAlBG,SAACC,GACpBV,EAAUU,EAAEC,cAAcC,QAkBVC,OAfO,WACvBf,GAAY,GACZH,EAAMmB,aAAaf,IAcHgB,WAAW,EACXH,MAAOb,Q,mBClC/B,EAAwI,iCAAxI,EAAwL,kCAAxL,EAA4O,qCCA5O,EAA+B,0CCElBiB,EAAsB,SAACC,GAChC,OAAO,0BACH,iBAAMC,UAAWC,EAAjB,SAAkCF,O,wCCGpCG,EAAmBC,EAAAA,KAAaC,MAAM,CAExCC,SAAUF,EAAAA,KACLG,IAAI,EAAG,sCACPC,IAAI,GAAI,wCACRC,SAAS,cAEdC,0BAA2BN,EAAAA,KACtBG,IAAI,EAAG,sCACPC,IAAI,GAAI,wCACRC,SAAS,cAEdE,QAASP,EAAAA,KACJG,IAAI,EAAG,sCACPC,IAAI,GAAI,wCACRC,SAAS,gBAwKlB,EAjJwB,SAAC/B,GAErB,IAAKE,EAAiDF,EAAjDE,SAAUgC,EAAuClC,EAAvCkC,QAASC,EAA8BnC,EAA9BmC,aAAcC,EAAgBpC,EAAhBoC,aAElCC,EAAoBC,KAAKC,MAAMD,KAAKE,UAAUN,IAE5CO,EAAiBC,OAAOC,KAAKT,EAAQU,UAU3C,OARAH,EAAeI,SAAQ,SAACC,GAEN,OADFT,EAAkBO,SAASE,KAEnCT,EAAkBO,SAASE,GAAQ,OAG3CC,QAAQC,IAAIX,IAIR,4BAEI,SAAC,KAAD,CACIY,cAAeZ,EACfZ,iBAAkBA,EAClByB,SAAU,SAACC,EAAQC,GACf,IAAK/C,EAA4B+C,EAA5B/C,UAAWgD,EAAiBD,EAAjBC,cAEhBlB,EAAagB,EAAQ9C,EAAWgD,EAAejB,IANvD,SASK,SAACkB,GAEE,IAAKlD,EAAwBkD,EAAxBlD,OAAQmD,EAAgBD,EAAhBC,aAEb,OACI,UAACC,EAAA,EAAD,CAAQC,KAAMvD,EAAd,WACI,SAACwD,EAAA,EAAD,mCACA,SAACC,EAAA,EAAD,WACI,UAAC,KAAD,YAEI,0BACI,SAAC,KAAD,CACIC,KAAM,WACNC,KAAM,OACNC,YAAa,iBAGrB,SAAC,KAAD,CAAcF,KAAK,WAAnB,SACKvC,KAGL,0BACI,qBAGJ,4BACI,SAAC,KAAD,CACIuC,KAAM,iBACNC,KAAM,WACNE,GAAG,oBACP,mBAAOC,QAAS,iBAAhB,WACI,8CADJ,WAIJ,0BACI,qBAGJ,0BACI,SAAC,KAAD,CACIJ,KAAM,4BACNK,GAAI,WACJH,YAAa,8BAGrB,SAAC,KAAD,CAAcF,KAAK,4BAAnB,SACKvC,KAGL,0BACI,qBAGJ,0BACI,SAAC,KAAD,CACIuC,KAAM,UACNK,GAAI,WACJH,YAAa,gBAGrB,SAAC,KAAD,CAAcF,KAAK,UAAnB,SACKvC,KAGL,0BACI,qBAGJ,4BACI,oCADJ,QAIA,SAAC,KAAD,CACIuC,KAAK,WACLM,OAAQ,kBACJ,yBACKzB,EAAe0B,KAAI,SAAAP,GAAI,OA5HrD,SAACA,GAChB,OACI,iBAAgBrC,UAAWC,EAA3B,WACI,4BACI,uBAAIoC,IADR,QAIA,0BACI,SAAC,KAAD,CACIA,KAAI,mBAAcA,GAClBC,KAAM,OACNE,GAAIH,EACJE,YAAaF,QAVfA,GA0H0DQ,CAAaR,YAKrD,0BACI,oBAGHxD,IACG,gBAAKmB,UAAWC,EAAhB,UACI,6BAAKpB,EAAL,2BAGR,SAACiE,EAAA,EAAD,CAAQ1D,QAAS,OAAQkD,KAAM,SACvBS,SAAUf,EADlB,SAEEA,EAAe,iBAAmB,UAGpC,SAACc,EAAA,EAAD,CAAQ1D,QAAS,OAAQF,GAAI,CAAC8D,MAAO,OAAQC,QAASpC,EAC9CyB,KAAM,SACNtC,UAAWC,EAFnB,iCAaxB,0BACI,wB,mGCjJViD,EAAU,SAAC,GAAiC,IAAhCC,EAA+B,EAA/BA,YAAaC,EAAkB,EAAlBA,aAC3B,OACI,UAACnE,EAAA,EAAD,CAAYoE,QAAS,OAAQC,WAAY,SAAUC,QAAS,OAAQC,OAAQ,MAAOtE,GAAI,CAACuE,SAAU,QAASC,WAAY,QAAvH,UACoB,aAAhBP,GAA6B,SAACQ,EAAA,EAAD,CAAUC,SAAU,UAC7B,YAAhBT,GAA4B,SAACU,EAAA,EAAD,CAAUD,SAAU,UAC5B,OAAhBT,GAAuB,SAACW,EAAA,EAAD,CAAuBF,SAAU,UACpC,YAAhBT,GAA4B,SAACY,EAAA,EAAD,CAASH,SAAU,UAC3B,cAAhBT,GAA8B,SAACa,EAAA,EAAD,CAAWJ,SAAU,UAC/B,YAAhBT,GAA4B,SAACc,EAAA,EAAD,CAASL,SAAU,UAC3B,WAAhBT,GAA2B,SAACe,EAAA,EAAD,CAAQN,SAAU,UACzB,aAAhBT,GAA6B,SAACgB,EAAA,EAAD,CAAMP,SAAU,UACzCT,EATpC,KAUIC,MAIZ,EA1CoB,SAAC,GAAsC,IAArCzC,EAAoC,EAApCA,QAASyD,EAA2B,EAA3BA,QAASC,EAAkB,EAAlBA,aACpC,OACI,SAACrF,EAAA,EAAD,WACI,UAACsF,EAAA,EAAD,CAAOC,UAAW,SAAUC,QAAS,EAArC,WACI,SAACC,EAAA,EAAD,CAASC,YAAa,aAAcC,UAAQ,KAC5C,UAAC1F,EAAA,EAAD,CAAYC,GAAI,CAAC0F,WAAY,QAA7B,gCACUjE,EAAQkE,eAAiB,MAAQ,QAE1ClE,EAAQkE,iBACL,UAAC5F,EAAA,EAAD,CAAYC,GAAI,CAAC0F,WAAY,QAA7B,sCACOjE,EAAQF,8BAEnB,UAACxB,EAAA,EAAD,CAAYC,GAAI,CAAC0F,WAAY,QAA7B,yBAAmDjE,EAAQD,YAC3D,SAAC+D,EAAA,EAAD,CAASC,YAAa,aAAcC,UAAQ,KAC5C,UAAC1F,EAAA,EAAD,CAAYC,GAAI,CAAC0F,WAAY,QAA7B,uBAAiDzD,OAAOC,KAAKT,EAAQU,UAAUuB,KAAI,SAAAkC,GAC/E,OAAO,SAAC5B,EAAD,CAAmBC,YAAa2B,EAAK1B,aAAczC,EAAQU,SAASyD,IAAtDA,SAExBV,IAAW,SAACtB,EAAA,EAAD,CAAQ1D,QAAS,YAAa6D,QAASoB,EAAvC,gC,oBC0B5B,EA/CoB,SAAC,GAA0E,IAAzED,EAAwE,EAAxEA,QAASzD,EAA+D,EAA/DA,QAAS9B,EAAsD,EAAtDA,OAAQe,EAA8C,EAA9CA,aAAcmF,EAAgC,EAAhCA,YAAaC,EAAmB,EAAnBA,cAEvE,GAA8BtG,EAAAA,EAAAA,WAAS,GAAvC,eAAKC,EAAL,KAAeC,EAAf,KAEA,IAAK+B,EACD,OAAO,SAACsE,EAAA,EAAD,IAaX,OACI,UAACjG,EAAA,EAAD,YACI,UAACsF,EAAA,EAAD,CAAOC,UAAW,MAAOC,QAAS,EAAGlB,WAAY,SAAUpE,GAAI,CAACgG,UAAW,OAAQC,aAAc,QAAjG,UACKf,GAAU,UAACgB,EAAA,EAAD,CAAYC,KAAM,EAAGnG,GAAI,CAACoG,MAAM,SAAUtC,MAAM,UAAU,aAAW,iBAAiBuC,UAAU,QAAhG,WACP,kBAAOC,QAAM,EAAClD,KAAM,OAAQ/C,SAfhB,SAACC,GACrBA,EAAEiG,OAAOC,MAAMC,QACfZ,EAAYvF,EAAEiG,OAAOC,MAAM,QAcnB,SAACE,EAAA,EAAD,CAASC,IAA6B,MAAxBlF,EAAQmF,OAAOC,MAAgBpF,EAAQmF,OAAOC,MAAQC,EAC5DC,IAAK,SACL/G,GAAI,CAACoG,MAAM,QAASY,OAAO,eACvB,SAACN,EAAA,EAAD,CAAQP,KAAM,EAAGQ,IAA6B,MAAxBlF,EAAQmF,OAAOC,MAAgBpF,EAAQmF,OAAOC,MAAQC,EACxFC,IAAK,SACL/G,GAAI,CAACoG,MAAM,QAASY,OAAO,YAE/B,UAAC5B,EAAA,EAAD,CAAOC,UAAW,SAAUc,KAAM,EAAGb,QAAS,EAAGlB,WAAY,OAA7D,WACI,SAACrE,EAAA,EAAD,CAAYG,QAAS,KAArB,SAA4BuB,EAAQN,YACpC,SAAC,EAAD,CAAwBxB,OAAQA,EAAQe,aAAcA,UAG7DjB,GACG,SAAC,EAAD,CAAiBgC,QAASA,EAASC,aAxB1B,SAACuF,EAAUrH,EACVgD,EAAejB,GAEjCmE,EAAcmB,EAAUrH,EAAWgD,EAAejB,IAqBqBlC,SAAUA,EAAUkC,aAAc,WAC7FjC,GAAY,OAEhB,SAAC,EAAD,CAAa+B,QAASA,EAAS0D,aAAc,WACzCzF,GAAY,IACbwF,QAASA,Q,UCjD5B,EAA6B,4BAA7B,EAAiE,uBCAjE,EAAuB,mBCkBvB,EAhBa,SAAC3F,GACV,OACI,iBAAKuB,UAAWC,EAAhB,WACI,gBAAK4F,IAAKG,EAAWC,IAAK,eACzBxH,EAAMsB,SACP,4BACI,mCADJ,IACuBtB,EAAM2H,cAG7B,0BACI,4C,mBXbH5F,GAAW,SAACd,GACrB,IAAIA,EACJ,MAAO,qB,WYDX,GAA8B,kCAA9B,GAAwE,4B,oBCG3D2G,GAAc,SAAC,GAA+C,IAA9CC,EAA6C,EAA7CA,MAA6C,IAAtCC,KAAOC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,MAAWhI,GAAW,cAChEiI,EAAWF,GAAWC,EAC5B,OAAO,iBAAKzG,UAAWC,GAAgB,KAAOyG,EAAWzG,GAAU,IAA5D,WACH,SAACxB,EAAMkI,WAAP,kBAAqBL,GAAW7H,IAC/BiI,IAAY,0BAAOD,QCDtBG,IdF2BpI,EcEI,GdFU,SAACkB,GAC5C,GAAIA,GAASA,EAAMiG,OAASnH,EAAW,MAAM,iBAAN,OAAwBA,EAAxB,cccrCqI,IAAmBC,EAAAA,EAAAA,GAAU,CAACC,KAAM,WAAjBD,EAXL,SAACrI,GAClB,OAAO,kBAAMkD,SAAUlD,EAAMmC,aAAtB,WACF,0BACI,SAAC,IAAD,CAAO2B,YAAa,sBAAuBF,KAAM,cAAekD,UAAWc,GAAaM,UAAW,WAAYK,SAAU,CAACxG,GAAUoG,SAExI,0BACI,gDA4BZ,GApBgB,SAACnI,GACb+C,QAAQC,IAAI,UACZ,IAAIwF,EAAgBxI,EAAMyI,MAAMtE,KAAI,SAAAuE,GAAC,OAAI,SAAC,EAAD,CAAMpH,QAASoH,EAAEpH,QAASqG,UAAWe,EAAEf,WAAgBe,EAAE3E,OAOlG,OACI,iBAAKxC,UAAWC,EAAhB,WACI,sCACA,SAAC4G,GAAD,CAAkBlF,SARP,SAACyF,GAChB3I,EAAM4I,QAAQD,EAAYE,aAC1BF,EAAYE,YAAc,OAOtB,gBAAKtH,UAAWC,EAAhB,SACKgH,Q,WCjBjB,IAFyBM,EAAAA,GAAAA,KAbH,SAACC,GACnB,MAAO,CACHN,MAAOM,EAAMC,YAAYP,MACzBI,YAAaE,EAAMC,YAAYH,gBAId,SAACI,GACtB,MAAO,CACHL,QAAS,SAACC,GAAD,OAAkBI,GAASC,EAAAA,EAAAA,IAAqBL,QAIxCC,CAA6CK,ICFtE,GAXgB,SAACnJ,GAEb,OACI,kBAAMuB,UAAWC,EAAjB,WACI,SAAC,EAAD,CAAa8E,YAAatG,EAAMsG,YAAcX,QAAS3F,EAAM2F,QAASzD,QAASlC,EAAMkC,QACxE9B,OAAQJ,EAAMI,OAAQe,aAAcnB,EAAMmB,aAAcoF,cAAevG,EAAMuG,iBAC1F,SAAC,GAAD,Q,iCCDN6C,GAAAA,SAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,GAAAA,SAAAA,IAAAA,OAAAA,EAAAA,EAAAA,GAAAA,KAAAA,GAAAA,EAAAA,MAAAA,KAAAA,WAiCD,OAjCCA,EAAAA,EAAAA,GAAAA,EAAAA,CAAAA,CAAAA,IAAAA,iBAAAA,MAEF,WACI,IAAIC,EAASC,KAAKtJ,MAAMuJ,OAAOC,OAAOH,OACjCA,IACDA,EAASC,KAAKtJ,MAAMyJ,cAGxBH,KAAKtJ,MAAM0J,WAAWL,GACtBC,KAAKtJ,MAAM2J,UAAUN,KACxB,+BAED,WACIC,KAAKM,mBACR,gCAED,SAAmBC,EAAWC,EAAWC,GACjCT,KAAKtJ,MAAMuJ,OAAOC,OAAOH,SAAWQ,EAAUN,OAAOC,OAAOH,QAC5DC,KAAKM,mBAEZ,oBAED,WACI,OACI,SAAC,IAAD,kBAAaN,KAAKtJ,OAAlB,IACS2F,SAAU2D,KAAKtJ,MAAMuJ,OAAOC,OAAOH,OACnCnH,QAASoH,KAAKtJ,MAAMkC,QACpB9B,OAAQkJ,KAAKtJ,MAAMI,OACnBe,aAAcmI,KAAKtJ,MAAMmB,aACzBmF,YAAagD,KAAKtJ,MAAMsG,YACxBC,cAAe+C,KAAKtJ,MAAMuG,qBAG1C,EAjCC6C,CAAyBY,EAAAA,WA4D/B,QAAeC,EAAAA,GAAAA,KACXnB,EAAAA,GAAAA,KAxBkB,SAACC,GAAD,MAAY,CAC9B7G,QAAS6G,EAAMC,YAAY9G,QAC3B9B,OAAQ2I,EAAMC,YAAY5I,OAC1BqJ,aAAcV,EAAMmB,KAAKb,OACzBc,OAAQpB,EAAMmB,KAAKC,UAoBM,CAACT,WAAAA,EAAAA,GAAYC,UAAAA,EAAAA,GAAWxI,aAAAA,EAAAA,GAAcmF,YAAAA,EAAAA,GAAaC,cAAAA,EAAAA,MAjBhF,SAAoB6D,GAahB,OAZA,SAAiCpK,GAC7B,IAAIqK,GAAWC,EAAAA,GAAAA,MACXC,GAAWC,EAAAA,GAAAA,MACXhB,GAASiB,EAAAA,GAAAA,MACb,OACI,SAACL,GAAD,kBACQpK,GADR,IAEIuJ,OAAQ,CAACc,SAAAA,EAAUE,SAAAA,EAAUf,OAAAA,SAU7BkB,GAAAA,EAFhB,CAGCtB,K,iJCrEGuB,EAA6B,SAAC5B,GAAD,MAAY,CACzCoB,OAAQpB,EAAMmB,KAAKC,SAGVO,EAAmB,SAACN,GAAe,IACtCQ,EADqC,0IAEvC,WACI,OAAKtB,KAAKtJ,MAAMmK,QACT,SAACC,GAAD,UAAed,KAAKtJ,SADI,SAAC,KAAD,CAAU6K,GAAE,eAHR,GACXb,EAAAA,WAShC,OAFqClB,EAAAA,EAAAA,IAAQ6B,EAAR7B,CAAoC8B,K","sources":["utils/validators/validators.js","webpack://react-social-network/./src/components/Profile/Profile.module.css?b512","components/Profile/ProfileInfo/ProfileStatus/ProfileStatusWithHooks.jsx","webpack://react-social-network/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","webpack://react-social-network/./src/components/common/ErrorMessageWrapper/ErrorMessageWrapper.module.css?d60b","components/common/ErrorMessageWrapper/ErrorMessageWrapper.jsx","components/Profile/ProfileInfo/ProfileData/ProfileDataForm.jsx","components/Profile/ProfileInfo/ProfileData/ProfileData.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","webpack://react-social-network/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://react-social-network/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.jsx","webpack://react-social-network/./src/components/common/FormControls/FormControls.module.css?7a3d","components/common/FormControls/FormControls.js","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx","components/hoc/withAuthRedirect.js"],"sourcesContent":["export const required = (value) => {\r\n    if (value) return undefined;\r\n    return 'Field is required'\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength) => (value) => {\r\n    if (value && value.length > maxLength) return `Max length is ${maxLength} symbols`;\r\n    return undefined;\r\n}\r\n\r\n","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Profile_item__QTNb2\"};","import React, {useEffect, useState} from \"react\";\r\nimport {Box, TextField, Typography} from \"@mui/material\";\r\n\r\nconst ProfileStatusWithHooks = (props) => {\r\n    let [editMode, setEditMode] = useState(false)\r\n    let [status, setStatus] = useState(props.status)\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n    const activateEditMode = () => {\r\n            setEditMode(true)\r\n    }\r\n\r\n    const onStatusChange = (e) =>{\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatus(status)\r\n    }\r\n    return (\r\n        <Box>\r\n            {!editMode &&\r\n                    <Typography sx={{cursor: \"pointer\"}}\r\n                                variant=\"subtitle1\"\r\n                                onDoubleClick={activateEditMode}>{props.status || '---'}\r\n                    </Typography>\r\n            }\r\n            {editMode  &&\r\n                    <TextField\r\n                        onChange={onStatusChange}\r\n                        onBlur={deactivateEditMode}\r\n                        autoFocus={true}\r\n                        value={status}/>\r\n            }\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default ProfileStatusWithHooks;","// extracted by mini-css-extract-plugin\nexport default {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__rR-Br\",\"profileImage\":\"ProfileInfo_profileImage__O6NDb\",\"contactItem\":\"ProfileInfo_contactItem__5sIzw\",\"cancelButton\":\"ProfileInfo_cancelButton__OfPrC\",\"validationError\":\"ProfileInfo_validationError__QnTRP\"};","// extracted by mini-css-extract-plugin\nexport default {\"errorMessage\":\"ErrorMessageWrapper_errorMessage__fC6z9\"};","import s from './ErrorMessageWrapper.module.css'\r\n\r\n\r\nexport const ErrorMessageWrapper = (message) => {\r\n    return <div>\r\n        <span className={s.errorMessage}>{message}</span>\r\n    </div>\r\n}","import React from \"react\";\r\n\r\nimport {ErrorMessage, Field, FieldArray, Form, Formik} from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport s from '../ProfileInfo.module.css'\r\nimport {ErrorMessageWrapper} from \"../../../common/ErrorMessageWrapper/ErrorMessageWrapper\";\r\nimport {Button, Dialog, DialogContent, DialogTitle} from \"@mui/material\";\r\n\r\nconst validationSchema = Yup.object().shape({\r\n\r\n    fullName: Yup.string()\r\n        .min(2, \"Must be longer than 2 characters !\")\r\n        .max(25, \"Must be shorter than 50 characters !\")\r\n        .required(\"Required !\"),\r\n\r\n    lookingForAJobDescription: Yup.string()\r\n        .min(2, \"Must be longer than 2 characters !\")\r\n        .max(50, \"Must be shorter than 50 characters !\")\r\n        .required(\"Required !\"),\r\n\r\n    aboutMe: Yup.string()\r\n        .min(2, \"Must be longer than 2 characters !\")\r\n        .max(50, \"Must be shorter than 50 characters !\")\r\n        .required(\"Required !\"),\r\n\r\n});\r\n\r\nlet contactsForm = (name) => {\r\n    return (\r\n        <div key={name} className={s.contactItem}>\r\n            <div>\r\n                <b>{name}</b>:\r\n            </div>\r\n\r\n            <div>\r\n                <Field\r\n                    name={`contacts.${name}`}\r\n                    type={'text'}\r\n                    id={name}\r\n                    placeholder={name}\r\n                />\r\n            </div>\r\n        </div>);\r\n}\r\n\r\n\r\nconst ProfileDataForm = (props) => {\r\n\r\n    let {editMode, profile, handleSubmit, goToViewMode} = props;\r\n\r\n    let objectFromApiCopy = JSON.parse(JSON.stringify(profile));\r\n\r\n    const arrayWithNames = Object.keys(profile.contacts);\r\n\r\n    arrayWithNames.forEach((item) => {\r\n        let value = objectFromApiCopy.contacts[item];\r\n        if (value === null) {\r\n            objectFromApiCopy.contacts[item] = '';\r\n        }\r\n    })\r\n    console.log(objectFromApiCopy)\r\n\r\n    return (\r\n\r\n        <div>\r\n\r\n            <Formik\r\n                initialValues={objectFromApiCopy}\r\n                validationSchema={validationSchema}\r\n                onSubmit={(values, bagWithMethods) => {\r\n                    let {setStatus, setSubmitting} = bagWithMethods;\r\n\r\n                    handleSubmit(values, setStatus, setSubmitting, goToViewMode);\r\n                }}\r\n            >\r\n                {(propsF) => {\r\n\r\n                    let {status, isSubmitting} = propsF;\r\n\r\n                    return (\r\n                        <Dialog open={editMode} >\r\n                            <DialogTitle>Change profile data</DialogTitle>\r\n                            <DialogContent>\r\n                                <Form>\r\n\r\n                                    <div>\r\n                                        <Field\r\n                                            name={'fullName'}\r\n                                            type={'text'}\r\n                                            placeholder={'Full name'}\r\n                                        />\r\n                                    </div>\r\n                                    <ErrorMessage name=\"fullName\">\r\n                                        {ErrorMessageWrapper}\r\n                                    </ErrorMessage>\r\n\r\n                                    <div>\r\n                                        < br/>\r\n                                    </div>\r\n\r\n                                    <div>\r\n                                        <Field\r\n                                            name={'lookingForAJob'}\r\n                                            type={'checkbox'}\r\n                                            id='lookingForAJob'/>\r\n                                        <label htmlFor={'lookingForAJob'}>\r\n                                            <b> Looking for a job</b> </label>\r\n                                    </div>\r\n\r\n                                    <div>\r\n                                        < br/>\r\n                                    </div>\r\n\r\n                                    <div>\r\n                                        <Field\r\n                                            name={'lookingForAJobDescription'}\r\n                                            as={'textarea'}\r\n                                            placeholder={'My professional skills'}\r\n                                        />\r\n                                    </div>\r\n                                    <ErrorMessage name=\"lookingForAJobDescription\">\r\n                                        {ErrorMessageWrapper}\r\n                                    </ErrorMessage>\r\n\r\n                                    <div>\r\n                                        < br/>\r\n                                    </div>\r\n\r\n                                    <div>\r\n                                        <Field\r\n                                            name={'aboutMe'}\r\n                                            as={'textarea'}\r\n                                            placeholder={'About me'}\r\n                                        />\r\n                                    </div>\r\n                                    <ErrorMessage name=\"aboutMe\">\r\n                                        {ErrorMessageWrapper}\r\n                                    </ErrorMessage>\r\n\r\n                                    <div>\r\n                                        < br/>\r\n                                    </div>\r\n\r\n                                    <div>\r\n                                        <b>Contacts</b>:\r\n                                    </div>\r\n\r\n                                    <FieldArray\r\n                                        name=\"contacts\"\r\n                                        render={() => (\r\n                                            <div>\r\n                                                {arrayWithNames.map(name => contactsForm(name))}\r\n                                            </div>\r\n                                        )}\r\n                                    />\r\n\r\n                                    <div>\r\n                                        < br/>\r\n                                    </div>\r\n\r\n                                    {status &&\r\n                                        <div className={s.validationError}>\r\n                                            <b> {status} - with setStatus </b>\r\n                                        </div>}\r\n\r\n                                    <Button variant={\"text\"} type={'submit'}\r\n                                            disabled={isSubmitting}\r\n                                    >{isSubmitting ? \"Please wait...\" : \"Save\"}\r\n                                    </Button>\r\n\r\n                                    <Button variant={\"text\"} sx={{color: \"red\"}} onClick={goToViewMode}\r\n                                            type={'button'}\r\n                                            className={s.cancelButton}> Cancel\r\n                                    </Button>\r\n\r\n                                </Form>\r\n                            </DialogContent>\r\n                        </Dialog>\r\n                    )\r\n                }}\r\n            </Formik>\r\n\r\n\r\n            <div>\r\n                < br/>\r\n            </div>\r\n\r\n\r\n        </div>)\r\n}\r\n\r\nexport default ProfileDataForm;","import {Box, Button, Divider, Stack, Typography} from \"@mui/material\";\r\nimport {\r\n    ConnectWithoutContact,\r\n    Facebook,\r\n    GitHub,\r\n    Instagram,\r\n    Link,\r\n    Twitter,\r\n    WebAsset,\r\n    YouTube\r\n} from \"@mui/icons-material\";\r\n\r\n\r\nconst ProfileData = ({profile, isOwner, goToEditMode}) => {\r\n    return (\r\n        <Box>\r\n            <Stack direction={\"column\"} spacing={1}>\r\n                <Divider orientation={\"horizontal\"} flexItem/>\r\n                <Typography sx={{fontWeight: \"bold\"}}>Looking for a\r\n                    job: {profile.lookingForAJob ? 'Yes' : 'No'}</Typography>\r\n\r\n                {profile.lookingForAJob &&\r\n                    <Typography sx={{fontWeight: \"bold\"}}>My professional skills\r\n                        : {profile.lookingForAJobDescription}</Typography>\r\n                }\r\n                <Typography sx={{fontWeight: \"bold\"}}> About me : {profile.aboutMe}</Typography>\r\n                <Divider orientation={\"horizontal\"} flexItem/>\r\n                <Typography sx={{fontWeight: \"bold\"}}>Contacts: {Object.keys(profile.contacts).map(key => {\r\n                    return <Contact key={key} contactName={key} contactValue={profile.contacts[key]}/>\r\n                })}</Typography>\r\n                {isOwner && <Button variant={\"contained\"} onClick={goToEditMode}>Edit profile</Button>}\r\n            </Stack>\r\n        </Box>\r\n\r\n    )\r\n\r\n};\r\n\r\n\r\nconst Contact = ({contactName, contactValue}) => {\r\n    return (\r\n        <Typography display={\"flex\"} alignItems={\"center\"} padding={\"10px\"} margin={\"5px\"} sx={{maxWidth: \"450px\", marginLeft: \"60px\"}}>{\r\n            contactName === \"facebook\" ? <Facebook fontSize={\"large\"} /> :\r\n                contactName === \"website\" ? <WebAsset fontSize={\"large\"}/> :\r\n                    contactName === \"vk\" ? <ConnectWithoutContact fontSize={\"large\"}/> :\r\n                        contactName === \"twitter\" ? <Twitter fontSize={\"large\"}/> :\r\n                            contactName === \"instagram\" ? <Instagram fontSize={\"large\"}/> :\r\n                                contactName === \"youtube\" ? <YouTube fontSize={\"large\"}/> :\r\n                                    contactName === \"github\" ? <GitHub fontSize={\"large\"}/> :\r\n                                        contactName === \"mainLink\" ? <Link fontSize={\"large\"}/> :\r\n                                            contactName\r\n        }: {contactValue}</Typography>\r\n    )\r\n}\r\n\r\nexport default ProfileData","import Preloader from \"../../common/Preloader/Preloader\";\r\nimport userPhoto from \"../../../assets/images/avatarPlaceholder.png\";\r\nimport ProfileStatusWithHooks from \"./ProfileStatus/ProfileStatusWithHooks\";\r\nimport {useState} from \"react\";\r\nimport ProfileDataForm from \"./ProfileData/ProfileDataForm\";\r\nimport ProfileData from \"./ProfileData/ProfileData\";\r\nimport {Avatar, Box, IconButton, Stack, Typography} from \"@mui/material\";\r\n\r\n\r\nconst ProfileInfo = ({isOwner, profile, status, updateStatus, updatePhoto, updateProfile}) => {\r\n\r\n    let [editMode, setEditMode] = useState(false)\r\n\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n    const onMainPhotoSelected = (e) => {\r\n        if (e.target.files.length) {\r\n            updatePhoto(e.target.files[0])\r\n        }\r\n    }\r\n    const handleSubmit = (formData, setStatus,\r\n                          setSubmitting, goToViewMode) => {\r\n\r\n        updateProfile(formData, setStatus, setSubmitting, goToViewMode);\r\n\r\n    }\r\n    return (\r\n        <Box>\r\n            <Stack direction={\"row\"} spacing={2} alignItems={\"center\"} sx={{marginTop: \"20px\", marginBottom: \"20px\"}}>\r\n                {isOwner ? <IconButton flex={2} sx={{width:\"150px\"}} color=\"primary\" aria-label=\"upload picture\" component=\"label\">\r\n                    <input hidden type={\"file\"} onChange={onMainPhotoSelected}/>\r\n                    <Avatar  src={profile.photos.large != null ? profile.photos.large : userPhoto}\r\n                            alt={'Avatar'}\r\n                            sx={{width:\"150px\", height:\"150px\"}}/>\r\n                </IconButton> : <Avatar flex={2} src={profile.photos.large != null ? profile.photos.large : userPhoto}\r\n                    alt={'Avatar'}\r\n                    sx={{width:\"150px\", height:\"150px\"}}/>}\r\n\r\n                <Stack direction={\"column\"} flex={4} spacing={1} alignItems={\"left\"}>\r\n                    <Typography variant={\"h6\"}>{profile.fullName}</Typography>\r\n                    <ProfileStatusWithHooks status={status} updateStatus={updateStatus}/>\r\n                </Stack>\r\n            </Stack>\r\n            {editMode ?\r\n                <ProfileDataForm profile={profile} handleSubmit={handleSubmit} editMode={editMode} goToViewMode={() => {\r\n                    setEditMode(false)\r\n                }}/> :\r\n                <ProfileData profile={profile} goToEditMode={() => {\r\n                    setEditMode(true)\r\n                }} isOwner={isOwner}/>}\r\n        </Box>\r\n    )\r\n};\r\n\r\n\r\nexport default ProfileInfo;","// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"MyPosts_postsBlock__bws95\",\"posts\":\"MyPosts_posts__xkQCF\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__C456R\"};","import s from './Post.module.css';\r\nimport userPhoto from \"../../../../assets/images/avatarPlaceholder.png\";\r\n\r\nconst Post = (props) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <img src={userPhoto} alt={\"profilePic\"}/>\r\n            {props.message}\r\n            <div>\r\n                <span>Like</span> {props.likeCount}\r\n            </div>\r\n\r\n            <div>\r\n                <span>Dislike</span>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Post;","// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"FormControls_formControl__FdFpZ\",\"error\":\"FormControls_error__4FBFc\",\"formSummaryError\":\"FormControls_formSummaryError__DXDRW\"};","import s from './FormControls.module.css'\r\nimport {Field} from \"redux-form\";\r\nimport React from \"react\";\r\n\r\nexport const FormControl = ({input, meta: {touched, error}, ...props}) => {\r\n    const hasError = touched && error;\r\n    return <div className={s.formControl + ' ' + (hasError ? s.error : '')}>\r\n        <props.fieldType {...input} {...props} />\r\n        {hasError && <span>{error}</span>}\r\n    </div>\r\n}\r\n\r\nexport const createField = (placeholder, name, fieldType, component, validate, props={}, text='') =>\r\n    (<div>\r\n        <Field placeholder={placeholder}\r\n               name={name}\r\n               fieldType={fieldType}\r\n               component={component}\r\n               validate={validate}\r\n               {...props}/> {text}\r\n    </div>)\r\n","import s from './MyPosts.module.css';\r\nimport Post from \"./Post/Post\";\r\nimport React, {memo} from \"react\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport {FormControl} from \"../../common/FormControls/FormControls\";\r\n\r\nconst maxLength10 = maxLengthCreator(10)\r\n\r\nconst NewPostForm = (props) => {\r\n   return <form onSubmit={props.handleSubmit}>\r\n        <div>\r\n            <Field placeholder={'Type your post here'} name={'newPostText'} component={FormControl} fieldType={'textarea'} validate={[required, maxLength10]}/>\r\n        </div>\r\n        <div>\r\n            <button>Add New</button>\r\n        </div>\r\n    </form>\r\n}\r\n\r\nconst NewPostReduxForm = reduxForm({form: 'newPost'})(NewPostForm)\r\n\r\n\r\nconst MyPosts = (props) => {\r\n    console.log('Render')\r\n    let postsElements = props.posts.map(p => <Post message={p.message} likeCount={p.likeCount} key={p.id}/> );\r\n\r\n    const addNewPost = (newPostData) => {\r\n        props.addPost(newPostData.newPostText);\r\n        newPostData.newPostText = ''\r\n    }\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <NewPostReduxForm onSubmit={addNewPost}/>\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MyPosts;","import React from \"react\";\r\nimport {addPostActionCreator} from \"../../../redux/profileReducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        newPostText: state.profilePage.newPostText\r\n    }\r\n};\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        addPost: (newPostText) => (dispatch(addPostActionCreator(newPostText))),\r\n    }\r\n};\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\r\n\r\nexport default MyPostsContainer;","import s from './Profile.module.css';\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nimport React from \"react\";\r\n\r\nconst Profile = (props) => {\r\n\r\n    return (\r\n        <main className={s.item}>\r\n            <ProfileInfo updatePhoto={props.updatePhoto}  isOwner={props.isOwner} profile={props.profile}\r\n                         status={props.status} updateStatus={props.updateStatus} updateProfile={props.updateProfile}/>\r\n            <MyPostsContainer/>\r\n        </main>\r\n    );\r\n}\r\n\r\nexport default Profile;","import React from \"react\";\r\nimport Profile from \"./Profile\";\r\nimport {getProfile, getStatus, updatePhoto, updateProfile, updateStatus} from \"../../redux/profileReducer\";\r\nimport {connect} from \"react-redux\";\r\nimport {useLocation, useParams} from \"react-router-dom\";\r\nimport {useNavigate} from 'react-router';\r\nimport {withAuthRedirect} from \"../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\n\r\nclass ProfileContainer extends React.Component {\r\n\r\n    refreshProfile() {\r\n        let userId = this.props.router.params.userId;\r\n        if (!userId) {\r\n            userId = this.props.signedUserId;\r\n        }\r\n\r\n        this.props.getProfile(userId)\r\n        this.props.getStatus(userId)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (this.props.router.params.userId !== prevProps.router.params.userId) {\r\n            this.refreshProfile()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile {...this.props}\r\n                     isOwner={!this.props.router.params.userId}\r\n                     profile={this.props.profile}\r\n                     status={this.props.status}\r\n                     updateStatus={this.props.updateStatus}\r\n                     updatePhoto={this.props.updatePhoto}\r\n                     updateProfile={this.props.updateProfile}\r\n            />\r\n        );\r\n    }\r\n\r\n}\r\n\r\nlet mapStateToProps = (state) => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    signedUserId: state.auth.userId,\r\n    isAuth: state.auth.isAuth\r\n});\r\n\r\nfunction withRouter(Component) {\r\n    function ComponentWithRouterProp(props) {\r\n        let location = useLocation();\r\n        let navigate = useNavigate();\r\n        let params = useParams();\r\n        return (\r\n            <Component\r\n                {...props}\r\n                router={{location, navigate, params}}\r\n            />\r\n        );\r\n    }\r\n\r\n    return ComponentWithRouterProp;\r\n}\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, {getProfile, getStatus, updateStatus, updatePhoto, updateProfile}),\r\n    withRouter, withAuthRedirect)\r\n(ProfileContainer)\r\n","import React from \"react\";\r\nimport {Navigate} from \"react-router\";\r\nimport {connect} from \"react-redux\";\r\n\r\nlet mapStateToPropsForRedirect = (state) => ({\r\n    isAuth: state.auth.isAuth\r\n});\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n    class RedirectComponent extends React.Component {\r\n        render() {\r\n            if (!this.props.isAuth) return <Navigate to={`/login`}/>\r\n            return <Component {...this.props}/>\r\n        }\r\n    }\r\n\r\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent);\r\n\r\n    return ConnectedAuthRedirectComponent\r\n}"],"names":["maxLength","props","useState","editMode","setEditMode","status","setStatus","useEffect","Box","Typography","sx","cursor","variant","onDoubleClick","TextField","onChange","e","currentTarget","value","onBlur","updateStatus","autoFocus","ErrorMessageWrapper","message","className","s","validationSchema","Yup","shape","fullName","min","max","required","lookingForAJobDescription","aboutMe","profile","handleSubmit","goToViewMode","objectFromApiCopy","JSON","parse","stringify","arrayWithNames","Object","keys","contacts","forEach","item","console","log","initialValues","onSubmit","values","bagWithMethods","setSubmitting","propsF","isSubmitting","Dialog","open","DialogTitle","DialogContent","name","type","placeholder","id","htmlFor","as","render","map","contactsForm","Button","disabled","color","onClick","Contact","contactName","contactValue","display","alignItems","padding","margin","maxWidth","marginLeft","Facebook","fontSize","WebAsset","ConnectWithoutContact","Twitter","Instagram","YouTube","GitHub","Link","isOwner","goToEditMode","Stack","direction","spacing","Divider","orientation","flexItem","fontWeight","lookingForAJob","key","updatePhoto","updateProfile","Preloader","marginTop","marginBottom","IconButton","flex","width","component","hidden","target","files","length","Avatar","src","photos","large","userPhoto","alt","height","formData","likeCount","FormControl","input","meta","touched","error","hasError","fieldType","maxLength10","NewPostReduxForm","reduxForm","form","validate","postsElements","posts","p","newPostData","addPost","newPostText","connect","state","profilePage","dispatch","addPostActionCreator","MyPosts","ProfileContainer","userId","this","router","params","signedUserId","getProfile","getStatus","refreshProfile","prevProps","prevState","snapshot","React","compose","auth","isAuth","Component","location","useLocation","navigate","useNavigate","useParams","withAuthRedirect","mapStateToPropsForRedirect","RedirectComponent","to"],"sourceRoot":""}