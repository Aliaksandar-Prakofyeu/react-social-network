{"version":3,"file":"static/js/914.b44835bb.chunk.js","mappings":"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","sources":["components/Profile/ProfileInfo/ProfileStatus/ProfileStatusWithHooks.tsx","webpack://react-social-network/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","components/Profile/ProfileInfo/ProfileData/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileData/ProfileData.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/NewPostForm.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","components/hoc/withAuthRedirect.tsx"],"sourcesContent":["import React, {ChangeEvent, useEffect, useState} from 'react'\r\nimport {Box, TextField, Typography} from '@mui/material'\r\n\r\ntype PropsType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nconst ProfileStatusWithHooks: React.FC<PropsType> = (props) => {\r\n    let [editMode, setEditMode] = useState(false)\r\n    let [status, setStatus] = useState(props.status)\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n    const activateEditMode = () => {\r\n            setEditMode(true)\r\n    }\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) =>{\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatus(status)\r\n    }\r\n    return (\r\n        <Box>\r\n            {!editMode &&\r\n                    <Typography sx={{cursor: 'pointer'}}\r\n                                variant='subtitle1'\r\n                                onDoubleClick={activateEditMode}>{props.status || '---'}\r\n                    </Typography>\r\n            }\r\n            {editMode  &&\r\n                    <TextField\r\n                        onChange={onStatusChange}\r\n                        onBlur={deactivateEditMode}\r\n                        autoFocus={true}\r\n                        value={status}/>\r\n            }\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default ProfileStatusWithHooks","// extracted by mini-css-extract-plugin\nexport default {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__rR-Br\",\"profileImage\":\"ProfileInfo_profileImage__O6NDb\",\"contactItem\":\"ProfileInfo_contactItem__5sIzw\",\"cancelButton\":\"ProfileInfo_cancelButton__OfPrC\",\"validationError\":\"ProfileInfo_validationError__QnTRP\"};","import React from 'react'\r\n\r\nimport {useFormik} from 'formik'\r\nimport * as Yup from 'yup'\r\nimport s from '../ProfileInfo.module.css'\r\nimport {\r\n    Alert,\r\n    Box,\r\n    Button,\r\n    Dialog,\r\n    DialogContent,\r\n    DialogTitle,\r\n    Stack,\r\n    Switch,\r\n    TextField,\r\n    Typography\r\n} from '@mui/material'\r\nimport {ProfileDataFormType} from '../../../../Types/types'\r\n\r\nconst validationSchema = Yup.object().shape({\r\n\r\n    fullName: Yup.string()\r\n        .min(2, 'Must be longer than 2 characters !')\r\n        .max(25, 'Must be shorter than 50 characters !')\r\n        .required('Required !'),\r\n\r\n    lookingForAJobDescription: Yup.string()\r\n        .min(2, 'Must be longer than 2 characters !')\r\n        .max(50, 'Must be shorter than 50 characters !')\r\n        .required('Required !'),\r\n\r\n    aboutMe: Yup.string()\r\n        .min(2, 'Must be longer than 2 characters !')\r\n        .max(50, 'Must be shorter than 50 characters !')\r\n        .required('Required !'),\r\n\r\n})\r\n\r\nconst ProfileDataForm: React.FC<ProfileDataFormType> = (props) => {\r\n\r\n    let {editMode, profile, handleSubmit, goToViewMode} = props\r\n\r\n    let objectFromApiCopy = JSON.parse(JSON.stringify(profile))\r\n\r\n    const arrayWithNames = Object.keys(profile.contacts)\r\n\r\n    arrayWithNames.forEach((item) => {\r\n        let value = objectFromApiCopy.contacts[item]\r\n        if (value === null) {\r\n            objectFromApiCopy.contacts[item] = ''\r\n        }\r\n    })\r\n    console.log(objectFromApiCopy)\r\n\r\n    const formik = useFormik({\r\n        initialValues: objectFromApiCopy,\r\n        validationSchema: validationSchema,\r\n        onSubmit: (values, bagWithMethods) => {\r\n            let {setStatus, setSubmitting} = bagWithMethods\r\n\r\n            handleSubmit(values, setStatus, setSubmitting, goToViewMode)\r\n        }\r\n    })\r\n    let contactsForm = (name: string) => {\r\n        return (\r\n            <div key={name} className={s.contactItem}>\r\n                <TextField\r\n                    label={name}\r\n                    name={`contacts.${name}`}\r\n                    id={name}\r\n                    placeholder={name}\r\n                    onChange={formik.handleChange}\r\n                />\r\n            </div>)\r\n    }\r\n    return <Dialog open={editMode} fullWidth\r\n                   maxWidth='sm'>\r\n        <DialogTitle>Change profile data</DialogTitle>\r\n        <DialogContent>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <Stack direction={'column'} spacing={2}>\r\n\r\n                    <TextField name='fullName'\r\n                               label='Full name'\r\n                               placeholder='Alex Jones'\r\n                               value={formik.values.fullName}\r\n                               onChange={formik.handleChange}\r\n                    />\r\n\r\n                    <Box>\r\n                        <Switch value={formik.values.lookingForAJob}/>\r\n                        <Typography component='label'>Looking for a job</Typography>\r\n                    </Box>\r\n\r\n                    <TextField label={'My Skills'}\r\n                               placeholder={'Type here'}\r\n                               minRows={3}\r\n                               multiline\r\n                               name={'lookingForAJobDescription'}\r\n                               value={formik.values.lookingForAJobDescription}\r\n                               onChange={formik.handleChange}\r\n                    />\r\n\r\n                    <TextField label={'About me'}\r\n                               placeholder={'Type here'}\r\n                               minRows={3}\r\n                               multiline\r\n                               name={'aboutMe'}\r\n                               value={formik.values.aboutMe}\r\n                               onChange={formik.handleChange}\r\n                    />\r\n\r\n                    <Stack direction={'column'} spacing={2}>\r\n                        <Typography>Contacts:</Typography>\r\n                        {arrayWithNames.map(name => contactsForm(name))}\r\n                    </Stack>\r\n\r\n                    {formik.status && <Alert severity='error'>{formik.status}</Alert>}\r\n\r\n                    <Button variant={'contained'} type={'submit'}\r\n                            disabled={formik.isSubmitting}\r\n                    >{formik.isSubmitting ? 'Please wait...' : 'Save'}\r\n                    </Button>\r\n\r\n                    <Button variant={'contained'} sx={{color: 'red'}} onClick={goToViewMode}\r\n                            type={'button'}\r\n                            className={s.cancelButton}> Cancel\r\n                    </Button>\r\n                </Stack>\r\n\r\n\r\n            </form>\r\n        </DialogContent>\r\n    </Dialog>\r\n}\r\n\r\n\r\nexport default ProfileDataForm","import {Accordion, AccordionDetails, AccordionSummary, Box, Button, Divider, Stack, Typography} from '@mui/material'\r\nimport {\r\n    ConnectWithoutContact, ExpandMore,\r\n    Facebook,\r\n    GitHub,\r\n    Instagram,\r\n    Link,\r\n    Twitter,\r\n    WebAsset,\r\n    YouTube\r\n} from '@mui/icons-material'\r\nimport {ContactsType, ProfileType} from '../../../../Types/types'\r\nimport React from 'react'\r\n\r\ntype ProfileDataType = {\r\n    profile: ProfileType\r\n    isOwner: boolean\r\n    goToEditMode: () => void\r\n}\r\n\r\nconst ProfileData: React.FC<ProfileDataType> = ({profile, isOwner, goToEditMode}) => {\r\n    return (\r\n        <Box>\r\n            <Stack direction={'column'} spacing={1}>\r\n                <Divider  textAlign=\"right\">{isOwner && <Button variant='text' size='small'  color='inherit' onClick={goToEditMode}>Edit profile</Button>}</Divider>\r\n                <Typography sx={{fontWeight: 'bold'}}>Looking for a\r\n                    job: {profile.lookingForAJob ? 'Yes' : 'No'}</Typography>\r\n\r\n                {profile.lookingForAJob &&\r\n                    <Typography sx={{fontWeight: 'bold'}}>My professional skills\r\n                        : {profile.lookingForAJobDescription}</Typography>\r\n                }\r\n                <Typography sx={{fontWeight: 'bold'}}> About me : {profile.aboutMe}</Typography>\r\n\r\n                <Accordion square elevation={0} sx={{ borderBottom: '1px solid #dddddd', borderRadius: '0px' }}>\r\n                    <AccordionSummary expandIcon={<ExpandMore/>} aria-controls=\"panel1a-content\"\r\n                                      id=\"panel1a-header\" sx={{padding:0}} >\r\n                        <Typography sx={{fontWeight: 'bold'}} >Show Contacts</Typography>\r\n                    </AccordionSummary>\r\n                    <AccordionDetails>\r\n                        {Object.keys(profile.contacts).map(key => {\r\n                            return <Contact key={key} contactName={key} contactValue={profile.contacts[key as keyof ContactsType]}/>\r\n                        })}</AccordionDetails>\r\n                </Accordion>\r\n                {/*<Typography sx={{fontWeight: 'bold'}}>Contacts: {Object.keys(profile.contacts).map(key => {\r\n                    return <Contact key={key} contactName={key} contactValue={profile.contacts[key as keyof ContactsType]}/>\r\n                })}</Typography>\r\n                {isOwner && <Button variant={'contained'} onClick={goToEditMode}>Edit profile</Button>}*/}\r\n            </Stack>\r\n        </Box>\r\n    )\r\n}\r\n\r\ntype ContactType = {\r\n    contactName: string\r\n    contactValue: string\r\n}\r\n\r\n\r\nconst Contact: React.FC<ContactType> = ({contactName, contactValue}) => {\r\n    return (<Box>\r\n            <Typography display={'flex'} alignItems={'center'} sx={{fontWeight: 'bold'}}>{\r\n                contactName === 'facebook' ? <Facebook fontSize={'large'} /> :\r\n                    contactName === 'website' ? <WebAsset fontSize={'large'}/> :\r\n                        contactName === 'vk' ? <ConnectWithoutContact fontSize={'large'}/> :\r\n                            contactName === 'twitter' ? <Twitter fontSize={'large'}/> :\r\n                                contactName === 'instagram' ? <Instagram fontSize={'large'}/> :\r\n                                    contactName === 'youtube' ? <YouTube fontSize={'large'}/> :\r\n                                        contactName === 'github' ? <GitHub fontSize={'large'}/> :\r\n                                            contactName === 'mainLink' ? <Link fontSize={'large'}/> :\r\n                                                contactName\r\n            }: {contactValue}</Typography>\r\n            <Divider/>\r\n    </Box>\r\n\r\n    )\r\n}\r\n\r\nexport default ProfileData","import Preloader from '../../common/Preloader/Preloader'\r\nimport userPhoto from '../../../assets/images/avatarPlaceholder.png'\r\nimport ProfileStatusWithHooks from './ProfileStatus/ProfileStatusWithHooks'\r\nimport React, {ChangeEvent, useState} from 'react'\r\nimport ProfileDataForm from './ProfileData/ProfileDataForm'\r\nimport ProfileData from './ProfileData/ProfileData'\r\nimport {Avatar, Box, IconButton, Stack, Typography} from '@mui/material'\r\nimport {ProfileInfoType, ProfileType} from '../../../Types/types'\r\n\r\n\r\n\r\n\r\n\r\nconst ProfileInfo: React.FC<ProfileInfoType> = ({isOwner, profile, status, updateStatus, updatePhoto, updateProfile}) => {\r\n\r\n    let [editMode, setEditMode] = useState(false)\r\n\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n    const onMainPhotoSelected = (e:  ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files?.length) {\r\n            updatePhoto(e.target.files[0])\r\n        }\r\n    }\r\n    const handleSubmit = (formData: ProfileType, setStatus: any, setSubmitting: any, goToViewMode: any) => {\r\n\r\n        updateProfile(formData, setStatus, setSubmitting, goToViewMode)\r\n\r\n    }\r\n    return (\r\n        <Box>\r\n            <Stack direction={'row'} spacing={2} alignItems={'top'} sx={{marginTop: '20px', marginBottom: '20px'}}>\r\n                <Box flex={1}>\r\n                    {isOwner ? <IconButton  sx={{width:'150px'}} color='primary' aria-label='upload picture' component='label'>\r\n                    <input hidden type={'file'} onChange={onMainPhotoSelected}/>\r\n                    <Avatar  src={profile.photos.large != null ? profile.photos.large : userPhoto}\r\n                             alt={'Avatar'}\r\n                             sx={{width:'150px', height:'150px'}}/>\r\n                </IconButton> : <Avatar  src={profile.photos.large != null ? profile.photos.large : userPhoto}\r\n                                         alt={'Avatar'}\r\n                                         sx={{flex: 2,width:'150px', height:'150px'}}/>}\r\n                </Box>\r\n                <Stack direction={'column'} flex={5} spacing={1} alignItems={'left'}>\r\n                    <Typography variant={'h6'}>{profile.fullName}</Typography>\r\n                    <ProfileStatusWithHooks status={status} updateStatus={updateStatus}/>\r\n                    {editMode ?\r\n                        <ProfileDataForm profile={profile} handleSubmit={handleSubmit} editMode={editMode} goToViewMode={() => {\r\n                            setEditMode(false)\r\n                        }}/> :\r\n                        <ProfileData profile={profile} goToEditMode={() => {\r\n                            setEditMode(true)\r\n                        }} isOwner={isOwner}/>}\r\n                </Stack>\r\n            </Stack>\r\n\r\n        </Box>\r\n    )\r\n}\r\n\r\n\r\nexport default ProfileInfo","// @ts-ignore\r\nimport userPhoto from '../../../../assets/images/avatarPlaceholder.png'\r\nimport {Avatar, Box, Divider, IconButton, Stack, Typography} from '@mui/material'\r\nimport React from 'react'\r\nimport {ThumbDownAlt, ThumbUp} from '@mui/icons-material'\r\nimport {PostType} from '../../../../Types/types'\r\n\r\n\r\nconst Post: React.FC<PostType> = (props) => {\r\n    return (<Box>\r\n            <Stack direction={'row'} spacing={2}  marginTop={'20px'}  marginBottom={'20px'} alignItems='center'>\r\n                <Avatar sx={{width: '100px', height: '100px'}} src={userPhoto}/>\r\n                <Stack direction={'column'} spacing={1}>\r\n                    <Typography flex={3}>{props.message}</Typography>\r\n                    <Stack alignItems={'center'} flex={1} direction={'row'} spacing={1}>\r\n                        <IconButton>\r\n                            <ThumbUp/>\r\n                        </IconButton>\r\n                        <Typography>60</Typography>\r\n                        <IconButton>\r\n                            <ThumbDownAlt/>\r\n                        </IconButton>\r\n                    </Stack>\r\n                </Stack>\r\n            </Stack>\r\n            <Divider/>\r\n        </Box>\r\n\r\n    )\r\n}\r\n\r\nexport default Post","import {useFormik} from 'formik'\r\nimport {Button, IconButton, InputAdornment, Stack, TextField} from '@mui/material'\r\nimport React from 'react'\r\nimport {Search, Send} from '@mui/icons-material'\r\n\r\ntype NewPostForm = {\r\n    addPost: (newPostText: string) => void\r\n}\r\n\r\nconst NewPostForm: React.FC<NewPostForm> = (props) => {\r\n\r\n    const OnAddPost = (values: string) => {\r\n        props.addPost(values)\r\n    }\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            newPostText: ''\r\n        },\r\n        onSubmit: (values) => {\r\n            OnAddPost(values.newPostText)\r\n            values.newPostText = ''\r\n        }\r\n    })\r\n    return (\r\n        <form onSubmit={formik.handleSubmit}>\r\n            <Stack direction={'column'} display={'flex'} spacing={1}>\r\n                <TextField sx={{flex: 3}}\r\n                           label={'New Post'}\r\n                           placeholder={'Type here'}\r\n                           minRows={3}\r\n                           multiline\r\n                           name={'newPostText'}\r\n                           value={formik.values.newPostText}\r\n                           onChange={formik.handleChange}\r\n                           InputProps={{\r\n                               endAdornment: <InputAdornment position={'end'}>\r\n                                   <IconButton type={'submit'}>\r\n                                       <Send fontSize={'large'}/>\r\n                                   </IconButton>\r\n                               </InputAdornment>\r\n                           }}\r\n                />\r\n                {/*<Button variant={'contained'} type={'submit'} sx={{flex: 1}}>Add post</Button>*/}\r\n            </Stack>\r\n        </form>)\r\n}\r\n\r\nexport default NewPostForm","import Post from './Post/Post'\r\nimport React from 'react'\r\nimport NewPostForm from './NewPostForm'\r\nimport {PostType} from '../../../Types/types'\r\nimport {Stack, Typography} from \"@mui/material\";\r\n\r\ntype PropsType = {\r\n    posts: Array<PostType>\r\n    addPost: (newPostText: string) => void\r\n}\r\n\r\nconst MyPosts: React.FC<PropsType> = (props) => {\r\n\r\n    let postsElements = props.posts.map(p =>\r\n        <Post message={p.message}\r\n              likesCount={p.likesCount}\r\n              id={p.id} key={p.id}/>)\r\n\r\n    return (\r\n        <Stack direction={'column'} spacing={2}>\r\n            <Typography variant={'h5'} fontWeight='bold'>Posts</Typography>\r\n            <NewPostForm addPost={props.addPost}/>\r\n            <Stack direction='column-reverse'>\r\n                {postsElements}\r\n            </Stack>\r\n        </Stack>\r\n    )\r\n}\r\n\r\nexport default MyPosts","import {actions} from '../../../redux/profileReducer'\r\nimport MyPosts from './MyPosts'\r\nimport {connect} from 'react-redux'\r\nimport {PostType} from '../../../Types/types'\r\nimport {AppStateType} from '../../../redux/reduxStore'\r\n\r\n\r\ntype MapStateType = {\r\n    posts: Array<PostType>\r\n    newPostText: string\r\n}\r\n\r\ntype MapDispatchType = {\r\n    addPost: (newPostText: string) => void\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        newPostText: state.profilePage.newPostText\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: any) => {\r\n    return {\r\n        addPost: (newPostText: string) => (dispatch(actions.addPostActionCreator(newPostText))),\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect<MapStateType, MapDispatchType, {}, AppStateType>(mapStateToProps, mapDispatchToProps)(MyPosts)\r\n\r\nexport default MyPostsContainer","import ProfileInfo from './ProfileInfo/ProfileInfo'\r\nimport MyPostsContainer from './MyPosts/MyPostsContainer'\r\nimport React from 'react'\r\nimport {ProfileInfoType} from '../../Types/types'\r\nimport {Stack} from \"@mui/material\";\r\n\r\nconst Profile: React.FC<ProfileInfoType>  = (props) => {\r\n\r\n    return (\r\n        <Stack direction={'column'} spacing={2}>\r\n            <ProfileInfo updatePhoto={props.updatePhoto}  isOwner={props.isOwner} profile={props.profile}\r\n                         status={props.status} updateStatus={props.updateStatus} updateProfile={props.updateProfile}/>\r\n            <MyPostsContainer/>\r\n        </Stack>\r\n    )\r\n}\r\n\r\nexport default Profile","import React from 'react'\r\nimport Profile from './Profile'\r\nimport {getProfile, getStatus, updatePhoto, updateProfile, updateStatus} from '../../redux/profileReducer'\r\nimport {connect} from 'react-redux'\r\nimport {useLocation, useParams} from 'react-router-dom'\r\nimport {useNavigate} from 'react-router'\r\nimport {withAuthRedirect} from '../hoc/withAuthRedirect'\r\nimport {compose} from 'redux'\r\nimport {ProfileType} from '../../Types/types'\r\nimport {AppStateType} from '../../redux/reduxStore'\r\n\r\n\r\ntype MapStateType = {\r\n    profile: ProfileType\r\n    status: string\r\n    signedUserId: number\r\n    isAuth: number\r\n}\r\n\r\ntype MapDispatchType = {\r\n    getProfile: (userId: number) => void\r\n    getStatus: (userId: number) => void\r\n    updateStatus: (status: string) => void\r\n    updatePhoto: (photo: File) => void\r\n    updateProfile: (formData: ProfileType, setStatus: any, setSubmitting: any, goToViewMode: any) => void\r\n    router: any\r\n}\r\n\r\ntype ProfileContainerType = MapStateType & MapDispatchType\r\n\r\nclass ProfileContainer extends React.Component<ProfileContainerType> {\r\n\r\n    refreshProfile() {\r\n        let userId: number | null = this.props.router.params.userId\r\n        if (!userId) {\r\n            userId = this.props.signedUserId\r\n        }\r\n\r\n        this.props.getProfile(userId)\r\n        this.props.getStatus(userId)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: ProfileContainerType, prevState: ProfileContainerType) {\r\n        if (this.props.router.params.userId !== prevProps.router.params.userId) {\r\n            this.refreshProfile()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile {...this.props}\r\n                     isOwner={!this.props.router.params.userId}\r\n                     profile={this.props.profile}\r\n                     status={this.props.status}\r\n                     updateStatus={this.props.updateStatus}\r\n                     updatePhoto={this.props.updatePhoto}\r\n                     updateProfile={this.props.updateProfile}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType) => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    signedUserId: state.auth.userId,\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nfunction withRouter(Component: any) {\r\n    function ComponentWithRouterProp(props: any) {\r\n        let location = useLocation()\r\n        let navigate = useNavigate()\r\n        let params = useParams()\r\n        return (\r\n            <Component\r\n                {...props}\r\n                router={{location, navigate, params}}\r\n            />\r\n        )\r\n    }\r\n\r\n    return ComponentWithRouterProp\r\n}\r\n\r\nexport default compose(withRouter,\r\n    connect(mapStateToProps, {getProfile, getStatus, updateStatus, updatePhoto, updateProfile}),\r\n    withAuthRedirect)\r\n(ProfileContainer)\r\n","import React from \"react\";\r\nimport {Navigate} from \"react-router\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/reduxStore\";\r\n\r\nlet mapStateToPropsForRedirect = (state: AppStateType) => ({\r\n    isAuth: state.auth.isAuth\r\n});\r\n\r\ntype MapPropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\ntype DispatchPropsType = {}\r\n\r\nexport function withAuthRedirect<WCP>(WrappedComponent: React.ComponentType<WCP>){\r\n    const RedirectComponent: React.FC<MapPropsType & DispatchPropsType> = (props) => {\r\n        let {isAuth, ...restProps} = props\r\n        if (!isAuth) return <Navigate to={`/login`}/>\r\n        return <WrappedComponent {...restProps as WCP}/>\r\n    }\r\n\r\n    let ConnectedAuthRedirectComponent = connect<MapPropsType,DispatchPropsType, WCP, AppStateType>(mapStateToPropsForRedirect)(RedirectComponent);\r\n\r\n    return ConnectedAuthRedirectComponent\r\n}"],"names":["props","useState","editMode","setEditMode","status","setStatus","useEffect","Box","Typography","sx","cursor","variant","onDoubleClick","TextField","onChange","e","currentTarget","value","onBlur","updateStatus","autoFocus","validationSchema","Yup","shape","fullName","min","max","required","lookingForAJobDescription","aboutMe","profile","handleSubmit","goToViewMode","objectFromApiCopy","JSON","parse","stringify","arrayWithNames","Object","keys","contacts","forEach","item","console","log","formik","useFormik","initialValues","onSubmit","values","bagWithMethods","setSubmitting","Dialog","open","fullWidth","maxWidth","DialogTitle","DialogContent","Stack","direction","spacing","name","label","placeholder","handleChange","Switch","lookingForAJob","component","minRows","multiline","map","className","s","id","contactsForm","Alert","severity","Button","type","disabled","isSubmitting","color","onClick","Contact","contactName","contactValue","display","alignItems","fontWeight","Facebook","fontSize","WebAsset","ConnectWithoutContact","Twitter","Instagram","YouTube","GitHub","Link","Divider","isOwner","goToEditMode","textAlign","size","Accordion","square","elevation","borderBottom","borderRadius","AccordionSummary","expandIcon","ExpandMore","padding","AccordionDetails","key","updatePhoto","updateProfile","Preloader","marginTop","marginBottom","flex","IconButton","width","hidden","target","files","length","Avatar","src","photos","large","userPhoto","alt","height","formData","message","ThumbUp","ThumbDownAlt","newPostText","addPost","OnAddPost","InputProps","endAdornment","InputAdornment","position","Send","postsElements","posts","p","likesCount","connect","state","profilePage","dispatch","actions","MyPosts","ProfileContainer","userId","this","router","params","signedUserId","getProfile","getStatus","refreshProfile","prevProps","prevState","React","compose","Component","location","useLocation","navigate","useNavigate","useParams","auth","isAuth","withAuthRedirect","mapStateToPropsForRedirect","WrappedComponent","restProps","to"],"sourceRoot":""}